h1. Adding tagging support

As our blog will contain more posts, it will become more and more difficult to retrieve them. To help classify posts by subject we will add tagging support.

h2. <a name="model">The Tag model object</a>

Let’s set-up the database model. Create a new evolution script to update your database schema, @yabe/db/evolutions/4.sql@:

bc. # --- !Ups
CREATE TABLE Tag (
    id bigint(20) NOT NULL AUTO_INCREMENT,
    name VARCHAR(255) NOT NULL,
    PRIMARY KEY (id)
);
# --- !Downs
DROP TABLE Tag;

Reload, and apply the evolution. Now create the corresponding Scala structure for @Tag@ in the same @models.scala@ file you used for @Post@ and @Author@:

bc. case class Tag(
    id: Pk[Long],
    name: String
)
object Tag extends Magic[Tag] {
    def apply(name:String) = new Tag(NotAssigned,name)
}

Because we want something like lazy tag creation we will always get them using the @findOrCreateByName(String name)@ factory method. Let’s add it to the @Tag@ class:

bc. object Tag extends Magic[Tag] {
    def apply(name:String) = new Tag(NotAssigned,name)
    // Search for a tag or create a new one
    def findOrCreateByName(name:String):Tag = {
        val maybeTag = Tag.find("name={pname}").on("pname"->name).first()
        maybeTag.getOrElse{
            Tag.create(Tag(name))
        }
    }
}

We use Anorm to lookup for the Tag by name. The @first()@ function returns an @Option[models.Tag]@ with either a @Tag@ or @None@ if there is no tag for this name. We use @getOrElse@ to either return the @Tag@, if it was found, or to execute the code in the else section. The @create()@ function from Anorm will insert a new @Tag@ into the Database. Because the last expression that is evaluated is the create, it will return the new @Tag@ automatically.

A less-verbose version of this code that is identical could be:

bc. object Tag extends Magic[Tag] {
    def apply(name:String) = new Tag(NotAssigned,name)
    // … shorter version
    def findOrCreateByName(name:String):Tag =
        Tag.find("name={pname}").on("pname"->name).first().getOrElse(Tag.create(Tag(name)))
}

h2. <a name="tagging">Tagging posts</a>

Now it’s time to link the new @Tag@ model with the @Post@ model. A @Post@ contains many @Tags@ and a @Tag@ can be linked to many @Post@ objects. Let’s add the correct relationship to the @Post@ class.

Create a new evolution script to update your database schema, @yabe/db/evolutions/5.sql@:

bc. --- Downs can be configured before Ups
    
# --- !Downs
DROP TABLE TagsForPosts;
    
# --- !Ups
CREATE TABLE TagsForPosts (
    id bigint(20) NOT NULL AUTO_INCREMENT,
    tag_id bigint(20) DEFAULT NULL,
    post_id bigint(20) DEFAULT NULL,
    PRIMARY KEY (id),
    KEY `FK01` (`tag_id`),
    KEY `FK02` (`post_id`),
    CONSTRAINT `FK01` FOREIGN KEY (`tag_id`) REFERENCES `Tag` (`id`) ON UPDATE CASCADE ON DELETE CASCADE ,
    CONSTRAINT `FK02` FOREIGN KEY (`post_id`) REFERENCES `Post` (`id`) ON UPDATE CASCADE ON DELETE CASCADE
);

Save the new evolution SQL script, reload your web browser and check that the script was applied.

Let’s create a new @TagsForPosts@ case class and its companion object:

bc. case class TagsForPosts(id:Pk[Long],
                            tag_id:Long,
                            post_id:Long)
// …
object TagsForPosts extends Magic[TagsForPosts] {
    def apply(tag_id:Long,post_id:Long) =
            new TagsForPosts(NotAssigned,tag_id,post_id)
}

Save your code and reload, it should compile.

h2. <a name="helpers">Adding helpers</a>

When you write a web application, try to enrich your domain to ease development. A controller should be as lightweight as possible. For our blog application, we need a method to tag a specific @Post@, and a method that will return the list of tags for a specific @Post@.

Edit the @Post case class@, not the companion object, and add a new function @tagItWith(name: String)@:

bc. // In models.scala in the case class Post
def tagItWith(name:String) = {
    val tag=Tag.findOrCreateByName(name)
    TagsForPosts.link(tag.id(),id())
}

Edit the @TagsForPosts@ object and create a new @link@ function:

bc. object TagsForPosts extends Magic[TagsForPosts] {
    def apply(tag_id:Long,post_id:Long) = new TagsForPosts(NotAssigned,tag_id,post_id)
    
    def link(tag_id:Long,post_id:Long):Option[Long] = {
         for(
            tag <- Tag.find("id={pid}").on("pid"->tag_id).first();
            post <- Post.find("id={pid}").on("pid"->post_id).first();
            maybeExistingTagAndPost = TagsForPosts.find("tag_id={p1} and post_id={p2}")
                                                  .on("p1"->tag_id,"p2"->post_id)
                                                   .first();
            val newKey = {
                maybeExistingTagAndPost match {
                    case Some(_) => maybeExistingTagAndPost.get.id()
                    case None => TagsForPosts.create(TagsForPosts(tag_id,post_id)).id()
                }
            }
        ) yield newKey
    }
}

This code is a little bit more complex. We want to insert a new line in @TagsForPosts@. We need first to check that the specified @tag_id@ and @post_id@ exist. Once we are sure that both objects exist, we can insert a new @TagsForPosts@. But what should we do if there’s already an entry? Well we will just return the @TagsForPosts@ ID and that’s it.

We need also another helper method on the @Post@ object companion. Add this new function to the object:

bc. object Post extends Magic[Post] {
    // … some other def
    //
    def findTaggedWith(name:String):List[Post] =
        SQL("""
            select * from Post p
            join TagsForPosts tfp on p.id=tfp.post_id
            join Tag t on tfp.tag_id=t.id
            where t.name={name}
        """).on("name"->name).as(Post *)
}

The @findTaggedWith@ method searches for @Post@ instances by @Tag@ name and returns a new List of @Post@ or @Nil@ if nothing was found.

Time for tests. Let’s see if it works. Open @Tests.scala@ and add a new test at the end of the file:

bc.    it should "support Tags" in {
        User.create(User(Id(1), "bob@gmail.com", "secret1", "Bob Morane", false))
        val postJava=Post.create(Post(NotAssigned, "My first post", "Java and Scala: yes it rocks!", new Date, 1))
        val javaTag = Tag.create(Tag("Java"))
        val scalaTag = Tag.create(Tag("Scala"))
        
        Post.findTaggedWith("Java").length should be(0)
        Post.findTaggedWith("Scala").length should be(0)
        
        postJava.tagItWith("Java")
        postJava.tagItWith("Scala")
        Post.findTaggedWith("Java").length should be(1)
        Post.findTaggedWith("Scala").length should be(1)
        
        postJava.tagItWith("A new Tag that does not already exist")
        
        // Should reuse existing TagsForPosts
        postJava.tagItWith("Scala")
        Post.findTaggedWith("Java").length should be(1)
        Post.findTaggedWith("Scala").length should be(1)
        
        // Another post
        val postScala=Post.create(Post(NotAssigned, "A scala post", "Scala only", new Date, 1))
        postScala.tagItWith("Scala")
        Post.findTaggedWith("Scala").length should be(2)
        
        // Let’s see what happens when we delete a Post
        Post.delete("where id={pid}").on("pid" -> postJava.id()).executeUpdate()
        Post.findTaggedWith("Scala").length should be(1)
    }

Reload and check in your browser: it should work.

h2. <a>How to return the list of posts that match a list of tags?</a>

Well, we won’t use it in our blog right now, but what if we wanted to retrieve posts tagged with several tags? It’s a little bit easier than the JPA version, thanks to Scala. The tricky part is that we have to use a @having count@ statement to filter only posts that have exactly **all tags** from the joined view.

bc. def findTaggedWith(tagNames:List[String]):List[Post] = {
    println(tagNames.mkString("','"))
    SQL("select distinct(p.*) from Post p join TagsForPosts tf on p.id=tf.post_id join Tag t on tf.tag_id=t.id where t.name in (" 
            +"'"
            +tagNames.mkString("','")
            +"'"
            +") group by p.id having count(t.id) = {size}").on("size"->tagNames.length).as(Post *)
}

Add a new test in @Tests.scala@. We create a @postScala@ item that is tagged with ‘Scala’. Then we create a new @Post@ tagged as ‘Scala’ and ‘NoSQL’. The @findTaggedWith@ should only return the second post if we look up the ‘Scala’ and ‘NoSQL’ tags: 

bc. it should "retrieves a list of Post for a List of Tags" in {
    User.create(User(Id(1), "bob@gmail.com", "secret1", "Bob Morane", false))
    val postScala=Post.create(Post(NotAssigned, "My Scala post", "Scala  for dummies", new Date, 1))
    postScala.tagItWith("Scala")
    
    // Create a new post, tag it with Scala and SQL
    val post3=Post.create(Post(NotAssigned, "Third post", "A Post about Scala and NoSQL", new Date, 1))
    post3.tagItWith("Scala")
    post3.tagItWith("NoSQL")
    
    Post.findTaggedWith(List("Scala")).length should be(2)
    Post.findTaggedWith(List("NoSQL")).length should be(1)
    Post.findTaggedWith(List("Scala","NoSQL")).length should be(1)
}

h2. <a name="cloud">The tag cloud</a>

Where we have tags, we need a tag cloud. Let’s add a method to the @Tag@ object to generate the tag cloud. The Scala version is simpler than the Java/JPA version. We don't need to use the JPQL new/map tricks. We will use the Parser Combinator, a very powerful feature of play-scala.

Add a new function @getTag@ in @TagsForPosts@ companion object:

bc. def getCloud:List[(String,Long)] = {
    SQL(""" 
            SELECT t.name, count(p.id) as totalPosts 
            FROM Post p
            JOIN TagsForPosts tfp on p.id=tfp.post_id
            JOIN Tag t ON tfp.tag_id=t.id
            GROUP BY t.name ORDER BY t.name  
            """).as(str("name") ~< long("totalPosts") ^^ flatten *)
} 

Add a new test in @Tests.scala@ that creates 3 entries, and check that the Tag cloud is Java=2, Scala=1 and JEE=1:

bc. it should "returns a Tag Cloud" in {
    User.create(User(Id(1), "bob@gmail.com", "secret1", "Bob Morane", false))
    
    val postJava=Post.create(Post(NotAssigned, "My first post", "Java 7 is out!", new Date, 1))
    postJava.tagItWith("Java")
    postJava.tagItWith("JEE")
    
    val postScalaJava =Post.create(Post(NotAssigned, "Another post", "Java and Scala: yes it rocks!", new Date, 1))
    postScalaJava.tagItWith("Java")
    postScalaJava.tagItWith("Scala")
    
    val cloud:List[(String,Long)]=TagsForPosts.getCloud
    
    cloud.length should be(3)
    
    cloud.map { tagAndTotal =>
        tagAndTotal match {
            case ("Java",cpt)  => cpt should be(2)
            case ("Scala",cpt) => cpt should be(1)
            case ("JEE",cpt) => cpt should be(1)
            case (_,cpt) => cpt should be(0)
        }
    }
}

Reload and execute the test in your browser to validate your code.

h2. <a name="bootstrap">Updating the bootstrap to tag some posts</a>

We can now use tags to add another way to browse the blog. As always, to work efficiently we need to add a bunch of test tags to our initial data set.

Modify the @/yabe/conf/initial-data.yml@ file to add some tags to the tests posts at the beginning of the file. For example:

bc. 
- !!models.Tag
    id:             !!Id[Long] 1
    name:           Play
    
- !!models.Tag
    id:             !!Id[Long] 2
    name:           Architecture 
     
- !!models.Tag
    id:             !!Id[Long] 3
    name:           Test 
    
- !!models.Tag
    id:             !!Id[Long] 4
    name:           MVC 
…

To create the relationship between a @Tag@ and a @Post@ we will create some @TagsForPosts@ entries at the end of the file:

bc. …
- !!models.TagsForPosts
    id: !!NotAssigned
    tag_id: 1
    post_id: 1
    
- !!models.TagsForPosts
    id: !!NotAssigned
    tag_id: 1
    post_id: 2
    
- !!models.TagsForPosts
    id: !!NotAssigned
    tag_id: 3
    post_id: 2 
     
- !!models.TagsForPosts
    id: !!NotAssigned
    tag_id: 4
    post_id: 3  
…

We need to declare 2 more entities in the bootstrap. Add 2 new lines in the @yabe/app/bootstrap.scala@ file: one line to read and create a @Tag@ and one line to read and create a @TagsForPosts@ object:

bc. import play.jobs._
    
@OnApplicationStart class BootStrap extends Job {
    
    override def doJob {
        
        import models._
        import play.test._
        
        // Import initial data if the database is empty
        if(User.count().single() == 0) {
            Yaml[List[Any]]("initial-data.yml").foreach { 
                _ match {
                    case u:User => User.create(u)
                    case p:Post => Post.create(p)
                    case c:Comment => Comment.create(c)
                    case t:Tag => Tag.create(t) 
                    case tfp:TagsForPosts => TagsForPosts.create(tfp) 
                }
            }
        }        
    }
}

You need to restart your application to force loading of the new initial data set. The Posts are now correctly tagged but we haven't updated the user-interface yet.  	

h2. <a name="ui">Updating the user-interface to display tags</a>

Let's see how we can now display our tags on the web page. First, we will update the @Post@ case class and add a new method, @getTags@. This method returns the list of @Tags@ for the current @Post@:

bc. 
case class Post(id: Pk[Long], title: String, content: String, postedAt: Date, author_id: Long) {
    // some other functions
    // …
    
    // Returns the list of Tag for this Post    
    def getTags:List[String]={
     SQL("""SELECT T.NAME FROM TAG t 
            JOIN TagsForPosts tfp ON tfp.tag_id=t.id 
            JOIN Post p on p.id=tfp.post_id 
            WHERE p.id={id}")
        .on("id"->id())
        .as(str("tag.name") *)
    }
}

This function selects the tags’ names for a specific @Post@ and returns a @List[String]@. 

Time to update the @display.scala.html@ tag now. We will use a different technique here. Instead of specifying a new template parameter, we can also call directly helper's method on object. Add a new span for Tags after the @<div class="post-metadata">@ section:

bc. @(post:(models.Post,models.User,Seq[models.Comment]), mode: String = "full")
    
@commentsTitle = {
    @if(post._3) {
        @post._3.size comments, latest by @post._3(0).author
    } else {
        no comments
    }
}
     
<div class="post @mode">
    <h2 class="post-title">
        <a href="@action(controllers.Application.show(post._1.id()))">@post._1.title</a>
    </h2>
    <div class="post-metadata">
        <span class="post-author">by @post._2.fullname</span>,
        <span class="post-date">
            @post._1.postedAt.format("dd MMM yy")
        </span>
        @if(mode != "full") {
            <span class="post-comments">
                @commentsTitle
            </span>
        }
    
    <span class="post-tags">
            - Tagged 
             @post._1.getTags.mkString(",")
     </span>
         
    </div>
    @if(mode != "teaser") {
        <div class="post-content">
            <div class="about">Detail: </div>
            @Html(post._1.content.replace("\n", "<br>"))
        </div>
    }
</div>

Let's explain what we added to the display template:

bc. <span class="post-tags">
        - Tagged 
         @post._1.getTags.mkString(",")
</span>

The @post._1@ returns the current @Post@. We apply the @getTags@ function that returns a @List[String]@. Finally, we use the "scala.collection.immutable.List":http://www.scala-lang.org/api/current/index.html#scala.collection.immutable.List class’ @mkString@ method to transform the @List@ of @String@ objects into one single @String@, where each token is separated by a quote.

In this section you added a new helper method and updated the display tag. The next section shows you how we can create a new @action@ in our controller to show all posts by tag.

h2. <a name="action">Adding a new action to display all posts by tag name</a>

To complete this tutorial, we will now create a new action that displays all posts for a specific tag. First, we will create a new action in the @Application@ controller, then we will update the @display.scala.html@ tag:

bc. <span class="post-tags">
        - Tagged 
        @post._1.getTags.map{ tag=>
            <a href="@action(controllers.Application.listTagged(tag))">@tag</a>
    }
</span>

And create the action method on the @Application@ controller:

bc. …
    def listTagged(tag:String) = {
        Post.findTaggedWith(tag)
    }
…

As always we create a specific route to keep clean URIs:

bc. GET     /posts/{tag}                    Application.listTagged

Here, we have a problem because we have an existing route that conflicts with this new one. The following two routes will match the same URI:

bc. GET     /posts/{id}                     Application.show
GET     /posts/{tag}                    Application.listTagged

However, because we’ll assume that an **id** is numeric and a **tag** is not, we can easily solve the situation using a regular expression to restrict the first route:

bc. GET     /posts/{<[0-9]+>id}             Application.show
GET     /posts/{tag}                    Application.listTagged 

This will work if and only if the @def listTagged@ parameter's name is @tag@. 

Reload and select a post, then select a tag: it should display a @List@ of @Post@ objects in your web browser. This is a little bit easier to test than the Java version. 

To complete this tutorial we will define the @listTagged@ view. Create the @/yabe/app/views/Application/listTagged.scala.html@ template that will be used by the @listTagged@ action we added above:

bc. @(posts:(List[models.Post]),tag:String)()
    
@main(title = "Posts tagged with "+tag) {
<div id="newPost">
    @posts.length match {
        case 1 => {
            <h3>There is one post tagged '@tag'</h3>
        }
        case 0 => {
            <h3>No post tagged '@tag'</h3>
        }
        case x => {
            <h3>There are @posts.length posts tagged '@tag'</h3>
        }
    }
    
    <ul>
        @posts.map { post =>
        <li><a href="@action(controllers.Application.show(post.id()))">@post.title</a> <em>@post.postedAt.format("dd/MM/yyyy")</em>
        </li>
        }
    </ul>
</div>
}

p(note). @posts.length@  does not work in version 0.9.2 of play-scala; you will need to upgrade to the latest version.

p(note). To be continued…